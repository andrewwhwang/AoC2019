from time import perf_counter
import numpy as np
import heapq

# inputs = """#########
# #b.A.@.a#
# #########"""

# inputs = """########################
# #f.D.E.e.C.b.A.@.a.B.c.#
# ######################.#
# #d.....................#
# ########################"""

# inputs = """########################
# #f.D.E.e.............@.#
# ######################.#
# #d.....................#
# ########################"""

# inputs = """########################
# #...............b.C.D.f#
# #.######################
# #.....@.a.B.c.d.A.e.F.g#
# ########################"""

# inputs = """#################
# #i.G..c...e..H.p#
# ########.########
# #j.A..b...f..D.o#
# ########@########
# #k.E..a...g..B.n#
# ########.########
# #l.F..d...h..C.m#
# #################"""

# inputs = """########################
# #@..............ac.GI.b#
# ###d#e#f################
# ###A#B#C################
# ###g#h#i################
# ########################"""

inputs = """#################################################################################
#...#.....#......c....#...#.Q.......#...#f#a....#..j..........#...............#.#
#.#.#.#.###.#######.#.#.#.#.###.###.#.#.#.#.###.#.#######.###.#.#.###########.#.#
#.#.#v#.....#.....#.#...#.#.#...#...#.#.#.#...#.......#...#.#.#.#...#...#.....N.#
###.#.#######.###.#X#######.#.###.###.###.###.#########R###.#.#.###.#.#.#.#######
#.K.#.....#...#...#.....#...#.#.....#...#.....#.......#.#.#...#...#.#.#.#...#...#
#.#.#####.#.###.#######.#.###.#####.#.#.#.#####.#####.#.#.#.#####.#.#.#.#####.#.#
#.#.#.U.#.#.#...#...#...#...#...#...#.#.#.#...#.#...#...#.#.....#.#...#.......#.#
#.#.###.#.#.#.#####.#.#.###.###.#.#####.#.#.#.#.###.#####.#####.#####.#####.###.#
#.#.#...#...#.....#.#.#...#.#.#.#.....#.#.#.#.#.Y.#.....#.....#.....#.#...#...#.#
#.#.#.#.#########.#.#.#####.#.#.#####.#.#.###.###.###.#.###.#.#####.###.#.#####.#
#.#...#.#.........#.#.........#.#...#...#.#...#...#...#.#...#.#...#...#.#.......#
#.#######.#########.###########.###.###.#.#.###.###.###.#.###.###.###.#.#######.#
#.....#...#.#...........#.......#.....#.#...#...#.#...#...#.........#.#.#...#...#
#.###.#.###.#.#########.#.#######.#####.#####.###.#.#.###############.#.#.#.#.###
#.#.#.#...#.....#.......#.#.............#.....#.....#.....#.....#...#.#...#.#...#
#.#.#.###.#####.#.#######.#.#####.#####.#.#####.#####.###.#.###.#.#.#.#.###.#####
#.#.#...#.O...#.#.#.......#.#...#.#...#.#...#...#...#...#...#...#.#...#...#.....#
#.#.#.#######.###.#.#####.###.#.#.#.#.#.#.#.#####.#.###.#####.###.#######.#####.#
#.#.#.......#.....#.....#t#...#.#.#.#.#.#.#.#.....#.#.......#.....#.....#.#.....#
#.#.#####.#######.#####.###.###.###.#.#.###.#.#####.###########.###.###.###.###.#
#.......#.........#...#...#.#.#.....#.#.#...#.....#.#.....#...#.....#...#...#.#.#
#######.###########.#####.#.#.#######.#.#.#####.###.#.###.#.###.#####.###.###.#.#
#.......#.......#...#...#.#...#...#...#.#.#.....#...#.#.#.#...#.#...#.....#.#...#
#.#####.#.#######.###.#.#.###.#.###.#####.#.#####.###.#.#.###.###.#.#.#####.#.###
#.#...#...#...#...#...#.#.#...#...#.....#...#...#.......#...#...#.#.#.#...#...#.#
#.#.#.#####.#.#.###.###.#.#.#####.#####.#P###.#.#######.###.###.#.#.###.#.###.#.#
#.#.#.......#...#...#.....#.#.....#...#.#.#i..#...#...#.#.....#...#.#...#...#...#
###.###############.#######.#.#.#.###.#.#.#####.###.#.###.#########.#.#####.###.#
#...#.............#...#...#.#.#.#.#...#.#.....#.#...#.....#.......#.#...#...#.#.#
#.###.#######.###.#.#.#.#.#.###.#.#.#.#.#####.#.#.#.#######.#####.#.###.###.#.#.#
#.#.........#.#...#.#...#.......#...#.#.#.....#.#.#.#...#...#...#.#...#...#.#.#.#
#.###########.#.###.###############.###.#.#####.#.###.#.#.###.###.###.###.#.#.#Z#
#...#.........#.#.#.#.#.......#.....#...#.#.....#.#...#...#...#.....#.....#.#...#
###.#.#########.#.#.#.#.#####.#.#####.#.#.###.###.#.#########.#.###.#######.#.###
#.#...#.....#...#.#...#.#...#.#...#...#.#.#...#...#.#.......#.#...#.#.......#.#.#
#.#####.#.###.###.###.#.#.#.#.#####.###.#.#.###.#.#.###.###.#.###.#.#.#######.#.#
#.....#.#...#.#.......#...#.#.#...#.#...#.#.#...#.#.....#...#...#.#.#.#.....#..x#
#.#####.###.#.#############.#.#.#.#.#.###.#.#.###########.###.#.#.###.#.#.#####.#
#.........#.................#...#...#.......#.................#.#.....#.#.......#
#######################################.@.#######################################
#.......#.................#...............#.....#...........#.........#...#.....#
#.#####.#.#########.#####.#.###########.#.#.###.#.#.#######.#.#.#######.#.###.#.#
#...#.#.#.#...#...#.....#.#...#...#.....#.#...#...#.....#...#.#...#.....#.#...#.#
###.#.#.###.#.#.#.#####.#.#####.#.#.###.#.###.#########.#####.###.#.#####.#V#####
#...#.#...#.#.#.#.....#.#.#.....#.#.#...#...#.#.....#.#.....#...#...#...#.#.....#
#.###.###.#.#.#.#####.#.#.#.#####.#.#.###.###.#.#.#.#.#####.###.#######.#.#####.#
#...#...#.#.#.#.....#...#.#.#.....#.#...#.#...#.#.#.W.#...#...#.........#.....#.#
#.#.###.#G#.#.#####.#####.#.#.#####.#####.#.#####.###.###.###.#####.#########.#.#
#.#.#...#...#.#.....#...#...#.#.........#...#...#...#.......#.....#.#.....#...#.#
###.#.#######.#.#######.#####.#.#######.#.###.#.###.#######.#.#####.#.###.#.###.#
#...#.#.....#...#...........#.#.....#...#p....#...#.....#...#......r#.#.....#...#
#.###.#.#.#######.###.#.#####.#.#####.#.#########.#.###.#E###########.#######.#.#
#.#.....#.#.........#.#.#...#.#.#.....#.#...#...#.#.#...#...#.S.....#...#.....#.#
#.#######.#.#########.#.#.#.#.#.#.#######.###.#.#.#.#.#####.###.#######.#.###.###
#.L.....#.#z....#.....#.#.#.#.#.#...#...#.#...#...#.#.#.........#.......#.#.#...#
#.#####.#.#####.#.#####.#.#.#.#####.#.#.#.#.#########.#.#########.#######.#.###.#
#.#...#.#...#...#.....#.#.#...#.....#.#.#.#.......#...#.#...#.....#.#..o#.#.#...#
#.#.###.###.#.#######.###.#####.#####.#.#.#######.#.###.#.#.#.#####.#.#.#.#.#.###
#.#.#...#...#.......#...#.#.#...I.....#.#...#...#.#...#...#b#.#.......#.#...#...#
#.#.#.###.#####.#######.#.#.#.#########.#.#.###.#.###.#######.#.#######.###.###.#
#.#.#.#.#.......#.....#.#.#......y..#.#.#.#.....#...#...#...#.#..l#..g#.#.....#.#
#.#.#.#.#.#######H#####.#.###.#####.#.#.#.###.#####.#.#.#.#.#####.#.#.#.#.#####.#
#...#.#.#...#...#.#..h#.#...#.#...#...#.#.#...#.....#.#.#.#.....#.#.#.#.#.#.#...#
#.###.#.###.#.#.#.#.#.#.###.###.#.#####.#.#####.#######.#.###.#.#.#.#.#.#.#.#.#.#
#.#...#.......#.#...#.#.....#...#...#...#...#...#.....#.#...#.#.#.#.#...#...#.#.#
#.#.###########.#####D#####.#.#####.#.#.#.#.#.###.###.#.###.#.#.#.#.#######.#.#.#
#.#.#.....#.......#.#.....#...#.....#.#.#.#.#.#...#...#.....#.#.#.#...#.....#.#.#
#M#.#.###.#######.#.#####.#####.#####.#####.#.#.###.###.#####.###.###.#.#####.#.#
#.#.....#.#.....#.......#...#.#.#.......#...#...#...#...#...#.......#...#...#.#.#
#.#######.#.###.#.#########.#A#.###.###.#.#######.#######.#.#.###########.#.#.#.#
#.#w....#.#...#.#.#....d....#.#...#...#.#.......#...#...#.#.#..m#.....#...#...#.#
#.#.###.#.###.#.###.#########.###.#####.#.###.#####.#.#.#.#.###.#.###.#.#######.#
#k#...#.#u#...#...B.#.....#.....#.....#.#...#.....#...#.#.#...#.#.#.#...#..n#...#
#.###.#.#.#.#########.###.#.#.#.#####J#.###.###.#.#####.#.###.###.#.#######.#.###
#.#...#...#...#...#...#.#...#.#.....#.#.#...#.#.#.....#.#...#...#.#.........#.#.#
###.#########.#.###F###.#####.#######.#.#.###.#.#####T#.###.###.#.#.#.#####.#.#.#
#...#.......#s#...#.........#...#...#...#.#...#.....#.#...#...#.#q#.#.#.....#...#
#.###.#####.#.#.#.#########.###.#.#.###.#.#.#.#####.#####.###.#.#.#.#.#########C#
#..e......#...#.#.............#...#.....#...#.....#...........#...#.#...........#
#################################################################################"""

class Node:
    def __init__(self, name, loc):
        self.name = name
        self.loc = loc
        self.adjList = {}
        self.key = None

    def __hash__(self):
        return hash(self.__repr__())

    def __eq__(self, other):
        return self.__class__ == other.__class__ and self.name == other.name

    def __lt__(self, other):
        return False

def getAdjList(dungeon, nodes, node):
    visited = {node.loc}
    queue = [*list(getValidAdj(node.loc, dungeon)), (0,0)]
    distance = 1
    res = {}

    while queue:
        loc = queue.pop(0)

        if loc == (0,0):
            distance += 1
            queue.append((0,0))
            # stop if two (0,0)s in a row
            if queue[0] == (0,0):
                break
        elif dungeon[loc].islower() or dungeon[loc].isupper():
            res[nodes[dungeon[loc]]] = distance
        else:
            for adj in getValidAdj(loc, dungeon): 
                if adj not in visited:
                    queue.append(adj)
                    visited.add(adj)

    return res

def getValidAdj(loc, dungeon):
    # top, bot, left, right positions
    poss = [(loc[0] - 1, loc[1]), (loc[0] + 1, loc[1]), (loc[0], loc[1] - 1), (loc[0], loc[1] + 1)]
    validKeys = [pos for pos in poss if dungeon[pos] != '#']
    return set(validKeys)

def makeGraph(inputs):
    lines =  inputs.split("\n")
    dungeon = np.zeros((len(lines),len(lines[0])),dtype="U")
    for i, line in enumerate(lines):
        dungeon[i] = list(line)

    Nodes = {}
    # first pass to initialize
    for (row, col), char in np.ndenumerate(dungeon):
        if char.islower() or char == '@' or char.isupper():
            Nodes[char] = Node(char, (row, col))
    # second pass to connect everything
    for name, node in Nodes.items():
        node.adjList = getAdjList(dungeon, Nodes, node)
        if name.isupper():
            node.key = Nodes[name.lower()]

    return Nodes

def BFS(start, maxNodes):
    #tuple = (distance, node, set of keys aquired)
    queue = [(0, start, frozenset())]
    history = set()

    while queue:
        distance, node, aquiredKeys = heapq.heappop(queue)

        if (node, aquiredKeys) in history:
            continue

        history.add((node, aquiredKeys))

        if len(aquiredKeys) == maxNodes:
            return distance

        for adj, dist in node.adjList.items():
            if adj.name.islower(): 
                heapq.heappush(queue,(distance + dist, adj, aquiredKeys|frozenset([adj])))
            elif adj.key in aquiredKeys:
                heapq.heappush(queue,(distance + dist, adj, aquiredKeys))
    return distance

if __name__== "__main__":
    graph = makeGraph(inputs)
    numKeys = len([g for g in graph if g.islower()])

    distance = BFS(graph['@'], numKeys)
    print(distance)
